############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
# Passes on URLError, timeout, and BadStatusLine exceptions.
#     See: 
#     http://docs.python.org/2/library/urllib2.html
#     http://docs.python.org/2/library/httplib.html
#
############################################################

try:
    import json
except ImportError:
    import sys
    sys.path.append('simplejson-2.3.3')
    import simplejson as json
    
import urllib2, httplib, urlparse
from urllib2 import URLError, HTTPError

_CT = 'content-type'
_AJ = 'application/json'
_URL_SCHEME = frozenset(['http', 'https']) 

class ServerError(Exception):

    def __init__(self, name, code, message):
        self.name = name
        self.code = code
        self.message = message

    def __str__(self):
        return self.name + ': ' + str(self.code) + '. ' + self.message

class PlantExpression:

    def __init__(self, url, timeout = 30 * 60):
        if url is None:
            raise ValueError('A url is required')
        scheme, _, _, _, _, _ = urlparse.urlparse(url)
        if scheme not in _URL_SCHEME:
            raise ValueError(url + " isn't a valid http url")
        self.url = url
        self.timeout = int(timeout)
        if self.timeout < 1:
            raise ValueError('Timeout value must be at least 1 second')

    def get_repid_by_sampleid(self, ids):

        arg_hash = { 'method': 'PlantExpression.get_repid_by_sampleid',
                     'params': [ids],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_experiments_by_seriesid(self, ids):

        arg_hash = { 'method': 'PlantExpression.get_experiments_by_seriesid',
                     'params': [ids],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_experiments_by_sampleid(self, ids):

        arg_hash = { 'method': 'PlantExpression.get_experiments_by_sampleid',
                     'params': [ids],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_experiments_by_sampleid_geneid(self, ids, gl):

        arg_hash = { 'method': 'PlantExpression.get_experiments_by_sampleid_geneid',
                     'params': [ids, gl],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_eo_sampleidlist(self, lst):

        arg_hash = { 'method': 'PlantExpression.get_eo_sampleidlist',
                     'params': [lst],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_po_sampleidlist(self, lst):

        arg_hash = { 'method': 'PlantExpression.get_po_sampleidlist',
                     'params': [lst],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_all_po(self, ):

        arg_hash = { 'method': 'PlantExpression.get_all_po',
                     'params': [],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_all_eo(self, ):

        arg_hash = { 'method': 'PlantExpression.get_all_eo',
                     'params': [],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_po_descriptions(self, ids):

        arg_hash = { 'method': 'PlantExpression.get_po_descriptions',
                     'params': [ids],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_eo_descriptions(self, ids):

        arg_hash = { 'method': 'PlantExpression.get_eo_descriptions',
                     'params': [ids],
                     'version': '1.1'
                     }

        body = json.dumps(arg_hash)
        try:
            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
        		    err = json.loads(h.read()) 
        		    if 'error' in err:
        			     raise ServerError(**err['error'])
        		    else: 			   #this should never happen... if it does 
        			     raise h     #  h.read() will return '' in the calling code.
            else:
        		    raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')




        
